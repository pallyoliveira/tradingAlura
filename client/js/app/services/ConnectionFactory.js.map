{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","ConectionFactory","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoincrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACQA,Y,GAAS,CAAC,aAAD,C;AACTC,a,GAAU,C;AACVC,Y,GAAS,Y;AACXC,gB,GAAa,I;AAEbC,W,GAAQ,I;;mCACCC,iB;AACX,qCAAc;AAAA;;AACZ;AACA,gBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACD;;AAED;;;;;0CACuB;AACrB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,kBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;AACAS,0BAAYI,eAAZ,GAA8B,aAAK;AACjCC,iCAAiBC,aAAjB,CAA+BC,EAAEC,MAAF,CAASC,MAAxC;AACD,eAFD;;AAIAT,0BAAYU,SAAZ,GAAwB,aAAK;AAC3B,oBAAI,CAACjB,UAAL,EAAiB;AACfA,+BAAac,EAAEC,MAAF,CAASC,MAAtB;AACAf,0BAAQD,WAAWC,KAAX,CAAiBiB,IAAjB,CAAsBlB,UAAtB,CAAR;AACAA,6BAAWC,KAAX,GAAmB,YAAY;AAC7B,0BAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACD,mBAFD;AAGD;AACDE,wBAAQL,UAAR;AACD,eATD;;AAWAO,0BAAYY,OAAZ,GAAsB,aAAK;AACzBC,wBAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAhB,uBAAOQ,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACD,eAHD;AAID,aArBM,CAAP;AAsBD;;;wCACoBvB,U,EAAY;AAC/BH,mBAAO2B,OAAP,CAAe,iBAAS;AACtB,kBAAIxB,WAAWyB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EACE3B,WAAW4B,iBAAX,CAA6BD,KAA7B;AACF3B,yBAAW6B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACD,aAJD;AAKD;;;4CAEwB;;AAEvB,gBAAG9B,UAAH,EAAe;AACXC;AACAD,2BAAa,IAAb;AACAC,sBAAQ,IAAR;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["\r\n  const stores = ['negociacoes'];\r\n  const version = 4;\r\n  const dbName = 'aluraframe';\r\n  let connection = null;\r\n\r\n  let close = null;\r\n  export class ConnectionFactory {\r\n    constructor() {\r\n      // Para não permitir que sejam criadas instâncias de uma classe, podemos lançar uma exceção em seu constructor\r\n      throw new Error(\"Não é possível criar instancias de connectionfactory\")\r\n    }\r\n\r\n    // A obtenção de uma conexão é um processo assíncrono, sendo assim, nada mais justo do que nosso método getConnection retornar uma promise para nos ajudar com a complexidade de códigos assíncronos.\r\n    static getConnection() {\r\n      return new Promise((resolve, reject) => {\r\n        let openRequest = window.indexedDB.open(dbName, version);\r\n        openRequest.onupgradeneeded = e => {\r\n          ConectionFactory._createStores(e.target.result);\r\n        }\r\n\r\n        openRequest.onsuccess = e => {\r\n          if (!connection) {\r\n            connection = e.target.result;\r\n            close = connection.close.bind(connection);\r\n            connection.close = function () {\r\n              throw new Error('voce não pode fechar diretamente a conexão')\r\n            }\r\n          }\r\n          resolve(connection);\r\n        }\r\n\r\n        openRequest.onerror = e => {\r\n          console.log(e.target.error)\r\n          reject(e.target.error.name);\r\n        }\r\n      });\r\n    }\r\n    static _createStores(connection) {\r\n      stores.forEach(store => {\r\n        if (connection.objectStoreNames.contains(store))\r\n          connection.deleteObjectStore(store)\r\n        connection.createObjectStore(store, { autoincrement: true })\r\n      })\r\n    }\r\n\r\n    static closeConnection() {\r\n\r\n      if(connection) {\r\n          close();\r\n          connection = null;\r\n          close = null;\r\n      }\r\n  }\r\n  }\r\n\r\n\r\n"]}