{"version":3,"sources":["../../app-es6/services/Proxy.Factory.js"],"names":["ProxyFactory","objeto","props","acao","Proxy","get","target","prop","receiver","includes","_ehFuncao","console","log","Reflect","apply","arguments","set","value","func","Function"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8BAIaA,Y;;;;;;;iCACGC,M,EAAQC,K,EAAOC,I,EAAM;AACjC,mBAAO,IAAIC,KAAJ,CAAUH,MAAV,EAAkB;AACvBI,iBADuB,eACnBC,MADmB,EACXC,IADW,EACLC,QADK,EACK;AAC1B,oBAAIN,MAAMO,QAAN,CAAeF,IAAf,KACFP,aAAaU,SAAb,CAAuBJ,OAAOC,IAAP,CAAvB,CADF,EACwC;AACtC,yBAAO,YAAY;AACjBI,4BAAQC,GAAR,oBAA6BL,IAA7B;AACAM,4BAAQC,KAAR,CAAcR,OAAOC,IAAP,CAAd,EAA4BD,MAA5B,EAAoCS,SAApC;AACA,2BAAOZ,KAAKG,MAAL,CAAP;AACD,mBAJD;AAKD;AACD,uBAAOO,QAAQR,GAAR,CAAYC,MAAZ,EAAoBC,IAApB,EAA0BC,QAA1B,CAAP;AACD,eAXsB;AAYvBQ,iBAZuB,eAYnBV,MAZmB,EAYXC,IAZW,EAYLU,KAZK,EAYET,QAZF,EAYY;AACjC,oBAAIN,MAAMO,QAAN,CAAeF,IAAf,CAAJ,EAA0B;AACxBJ,uBAAKG,MAAL,EADwB,CACV;AACf;AACD,uBAAOO,QAAQG,GAAR,CAAYV,MAAZ,EAAoBC,IAApB,EAA0BU,KAA1B,EAAiCT,QAAjC,CAAP;AACD;AAjBsB,aAAlB,CAAP;AAmBD;;;oCAEgBU,I,EAAM;AACrB,mBAAO,QAAQA,IAAR,yCAAQA,IAAR,cAAyBC,QAAzB,yCAAyBA,QAAzB,EAAP;AACD","file":"Proxy.Factory.js","sourcesContent":["\r\n// Factory que consiste em uma classe ser especializada em criar \r\n// determinado tipo de objeto\r\n\r\nexport class ProxyFactory {\r\n  static create(objeto, props, acao) {\r\n    return new Proxy(objeto, {\r\n      get(target, prop, receiver) {\r\n        if (props.includes(prop) &&\r\n          ProxyFactory._ehFuncao(target[prop])) {\r\n          return function () {\r\n            console.log(`interceptando ${prop}`);\r\n            Reflect.apply(target[prop], target, arguments);\r\n            return acao(target);\r\n          }\r\n        }\r\n        return Reflect.get(target, prop, receiver);\r\n      },\r\n      set(target, prop, value, receiver) {\r\n        if (props.includes(prop)) {\r\n          acao(target); // target(prop) = value;          \r\n        }\r\n        return Reflect.set(target, prop, value, receiver);\r\n      }\r\n    });\r\n  }\r\n\r\n  static _ehFuncao(func) {\r\n    return typeof (func) == typeof (Function);\r\n  }\r\n}\r\n// O padrão de projeto Factory ocorre quando temos uma classe que nos ajuda a criar um objeto complexo, ou seja, ela esconde de nós os detalhes de criação desse objeto. É por isso que uma classe Factory possui apenas um método.\r\n// O padrão de projeto Factory é um dos padrões mais utilizados no desenvolvimento. Ele é mais um da categoria dos patterns responsáveis por criar objetos, como o Builder e o Prototype."]}